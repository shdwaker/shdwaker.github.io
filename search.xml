<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Memory Analyzer的使用记录]]></title>
    <url>%2F2018%2F09%2F05%2FMemory%20Analyzer%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[作为一个Java程序员，在系统出现内存泄漏等问题时，可以利用一些工具来分析dump文件，找到内存泄漏的原因，Memory Analyzer是一个很好的工具。 MAT使用记录下载地址http://www.eclipse.org/mat/downloads.php 问题一下载完成之后，运行弹窗报错：123An error has occurred. See the log file /Users/%username%/.eclipse/1899417313_macosx_cocoa_x86_64/configuration/1507391541586.log. 意思就是系统默认的workspace路径是只读的，只需更换默认位置就好了，需要注意添加参数时位置要在vm参数配置之前。 参考网友遇到的同样问题https://stackoverflow.com/questions/47909239/how-to-run-eclipse-memory-analyzer-on-mac-os 解决办法修改配置MemoryAnalyzer.ini，文件路径在你的下载位置/mat.app/Contents/Eclipse/MemoryAnalyzer.ini，最终的配置模样是 12345678910-startup../Eclipse/plugins/org.eclipse.equinox.launcher_1.5.0.v20180512-1130.jar-data/Users/jindanzi/mat.log--launcher.library../Eclipse/plugins/org.eclipse.equinox.launcher.cocoa.macosx.x86_64_1.1.700.v20180518-1200-vmargs-Xmx4086m-Dorg.eclipse.swt.internal.carbon.smallFonts-XstartOnFirstThread 必须在--launcher.library之前增加12-data/Users/jindanzi/mat.log 否则仍然报错 问题二MAT分析时报错An internal error occurred during: &quot;Parsing heap dump from XXX” 解决办法修改参数-vmargs增加内存大小 12-vmargs-Xmx4086m]]></content>
      <tags>
        <tag>MAT</tag>
        <tag>Memory Analyzer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Travis CI]]></title>
    <url>%2F2018%2F09%2F04%2FTravis-CI%2F</url>
    <content type="text"><![CDATA[前面介绍了Hexo搭建博客的过程，在使用的过程中，push到GitHub上面的实际上是hexo生成的静态文件，源代码依然还在本地。万一源文件丢失或者更换了电脑，怎么更新博客呢，于是想到将源文件也托管到GitHub上，但是每次都要push两次，有没有一个工具可以自动进行部署呢？ Travis CI介绍前面提到，我想做到把源代码放到GitHub上，只要要源代码提交，能自动将代码编译后上传到username.github.io仓库下，既托管了源代码又能自动进行部署，完美！！！这其实就是一个CI的过程，CI是啥，我就不做介绍，自行Google。 Travis CI 是目前新兴的开源持续集成构建项目，它与jenkins，GO的很明显的特别在于采用yaml格式，同时他是在在线的服务，不像jenkins需要你本地打架服务器，简洁清新独树一帜。目前大多数的github项目都已经移入到Travis CI的构建队列中，据说Travis CI每天运行超过4000次完整构建。 项目网址：https://travis-ci.org/ 配置Travis CI 使用Github账号登录Travis CI，登录之后，点击页面左侧的加号 会列出你的GitHub项目，点击X开启项目 项目配置 配置项都选择默认，我们需要配置的是access token 生成Access Token 到GitHub -&gt; Settings -&gt; Developer settings -&gt; Personal access tokens点击生成一个token，权限都勾选上请注意一定要把token值复制下来，否则到其他页面就看不到内容了 将token添加到项目的环境变量中 配置自动构建脚本Travis CI是根据项目里面的.travis.yml文件来自动构建项目的，配置可以参考官方文档文档：https://docs.travis-ci.com/user/getting-started/ 我的该文件配置如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354# Refrecnes:# https://zespia.tw/blog/2015/01/21/continuous-deployment-to-github-with-travis/# https://docs.travis-ci.com/user/languages/javascript-with-nodejs# https://github.com/iissnan/theme-next-docs/blob/master/.travis.yml# http://changyuheng.me/2015/when-hexo-static-site-meets-github-pages-and-travis-ci/language: node_jsnode_js: stablecache: directories: - node_modulesbefore_install: - export TZ=&apos;Asia/Shanghai&apos; # 更改时区install: - npm installbefore_script: - git submodule update --remote --mergescript: - hexo clean #清除 - hexo g #生成after_script: - git clone https://$&#123;GIT_PAGE_REF&#125; .deploy_git # GH_REF是最下面配置的仓库地址 - cd .deploy_git - git checkout master - cd ../ - mv .deploy_git/.git/ ./public/ # 这一步之前的操作是为了保留master分支的提交记录，不然每次git init的话只有1条commit - cd ./public - git config user.name &quot;github-username&quot; - git config user.email &quot;github-email&quot; - git add . - git commit -m &quot;Travis CI Auto Builder at `date +&quot;%Y-%m-%d %H:%M&quot;`&quot; - git push --force --quiet &quot;https://$&#123;GH_TOKEN&#125;@$&#123;GIT_PAGE_REF&#125;&quot; master:masterbranches: only: - masterenv: global: - GIT_PAGE_REF: github.com/Repositories/&#123;username&#125;.github.io.git# configure notifications (email, IRC, campfire etc)# please update this section to your needs!# https://docs.travis-ci.com/user/notifications/notifications: email: - your-email.com on_success: change on_failure: always 将这个文件放在项目的根目录下 测试CIpush一个文件到指定分支上，到Travis-CI网站上能看到如下页面 当状态变成passed，打开{username}.github.io就能看到文件的变化，是不是很6！！！]]></content>
      <tags>
        <tag>Travis</tag>
        <tag>CI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo搭建个人技术博客]]></title>
    <url>%2F2018%2F09%2F02%2FHexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[这是我的第一篇文章，主要用来记录Hexo + Github 搭建个人技术博客过程 Hexo + Github 搭建个人技术博客过程背景作为一个程序员，一直想搞一个个人的技术博客，虽然有很多技术博客网站（CSDN、简书等）都很好用，但本人主要想用记录博客的方式记录一些技术细节，方便以后好查找。本着免费的原则，网上找了很久，终于发现了Hexo，它可以很简单的使用GitHub托管的方式快速搭建一个博客，下面我记录下本人搭建的过程。 前提准备工作 拥有一个GitHub账号 安装Node.js、npm，并了解相关基础 安装Git客户端 本人使用的环境 mac node -v v8.8.1 git –version 2.12.2 参考 https://blog.csdn.net/u011475210/article/details/79023429 新建仓库在GitHub新建一个名为{username}.github.io的仓库，比如你的GitHub用户名是pig，就新建一个pig.github.io的仓库。将来博客搭建好了之后，就可以通过，https://pig.github.io来访问了。 配置SSH key要想提交代码到GitHub，必须有GitHub权限才行。GitHub可以通过配置SSH Key来解决本地跟GitHub服务器的连接安全问题。 1.配置全局name和email 123git config --global user.name "name" git config --global user.email "email" name和email是注册github的昵称和邮箱 2.生成Key 1ssh-keygen -t rsa -C &quot;your email&quot; 之后会让你输入GitHub账号和密码，输入文件名，默认为id_rsa，路径在~/.ssh/id_rsa 3.设置ssh key 1cat id_rsa.pub 将内容添加到GitHub -&gt; Settings -&gt; SSH and GPG Keys -&gt; New SSH Key Node.js、npm、git安装由于本人是使用的mac123brew install nodebrew install npmbrew install git Hexo安装hexo地址https://hexo.io/zh-cn/docs/index.html 1npm install -g hexo-cli hexo的使用请看文档，不再赘述。 主题配置hexo 我选择使用Next主题 下载主题 在博客根目录出打开命令行输入以下命令:1git clone https://github.com/theme-next/hexo-theme-next themes/next 将主题下载到博客的themes/next文件夹下 启用主题 只需在_config.yml中增加一行 theme: next 主题设定 Next主题相关的配置相当灵活，基本在/themes/next/_config.yml文件中，我的相关配置如下 1234Scheme: Mistsidebar: position: righthighlight_theme: night eighties 开始写文章在命令行界面，进入博客根目录，输入hexo new [post] 2018-09-02-my_first.md就会在source/_posts目录下自动创建名为2018-09-02-my_first.md的markdown文件，然后进行markdown编写就行了 本地预览运行hexo server命令启动Hexo，使用浏览器访问http://localhost:4000/即可浏览博客 发布到GitHub12345deploy: type: git repo: 你的博客git地址 branch: master message: 在_config.yml中配置GitHub相关项目配置后，运行hexo deploy，hexo会将博客生成的静态内容push到GitHub项目下，过一会你通过https://pig.github.io就可以在线看到博客内容了]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>github</tag>
        <tag>node</tag>
        <tag>npm</tag>
      </tags>
  </entry>
</search>
